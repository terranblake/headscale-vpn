version: '3.8'

services:
  # PostgreSQL database for Headscale
  headscale-db:
    image: postgres:15-alpine
    container_name: headscale-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: headscale
      POSTGRES_USER: headscale
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-headscale_password_change_me}
    volumes:
      - headscale-db-data:/var/lib/postgresql/data
    networks:
      - headscale-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U headscale"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Headscale coordination server
  headscale:
    image: ghcr.io/juanfont/headscale:latest
    container_name: headscale
    restart: unless-stopped
    command: serve
    environment:
      - HEADSCALE_CONFIG_FILE=/etc/headscale/config.yaml
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-headscale_password_change_me}
    volumes:
      - ./config/headscale:/etc/headscale:ro
      - headscale-data:/var/lib/headscale
      - headscale-socket:/var/run/headscale
    ports:
      - "8080:8080"  # HTTP API and web interface
      - "50443:50443"  # gRPC API for clients
    networks:
      - headscale-net
    depends_on:
      headscale-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Headscale Web UI
  headscale-ui:
    image: ghcr.io/gurucomputing/headscale-ui:latest
    container_name: headscale-ui
    restart: unless-stopped
    environment:
      - HEADSCALE_URL=http://headscale:8080
    ports:
      - "9443:80"
    networks:
      - headscale-net
    depends_on:
      - headscale

  # VPN Exit Node - Routes traffic through commercial VPN
  vpn-exit-node:
    build:
      context: ./build/vpn-exit-node
      dockerfile: Dockerfile
    container_name: vpn-exit-node
    restart: unless-stopped
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    devices:
      - /dev/net/tun
    environment:
      - HEADSCALE_URL=http://headscale:8080
      - HEADSCALE_PREAUTH_KEY=${HEADSCALE_PREAUTH_KEY}
      - NORDVPN_USER=${NORDVPN_USER}
      - NORDVPN_PASS=${NORDVPN_PASS}
      - NORDVPN_SERVER=${NORDVPN_SERVER:-us}
      - BYPASS_DOMAINS=${BYPASS_DOMAINS:-""}
      - BYPASS_IPS=${BYPASS_IPS:-""}
    volumes:
      - vpn-exit-data:/var/lib/tailscale
      - ./config/vpn-exit:/etc/vpn-config:ro
    networks:
      - headscale-net
    depends_on:
      - headscale
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.forwarding=1

  # Optional Proxy Gateway for traffic inspection
  proxy-gateway:
    build:
      context: ./build/proxy-gateway
      dockerfile: Dockerfile
    container_name: proxy-gateway
    restart: unless-stopped
    privileged: true
    cap_add:
      - NET_ADMIN
    environment:
      - HEADSCALE_URL=http://headscale:8080
      - HEADSCALE_PREAUTH_KEY=${HEADSCALE_PREAUTH_KEY}
      - MITMPROXY_MODE=${MITMPROXY_MODE:-transparent}
      - MITMPROXY_PORT=${MITMPROXY_PORT:-8080}
    volumes:
      - proxy-gateway-data:/var/lib/tailscale
      - proxy-certs:/root/.mitmproxy
      - ./config/proxy:/etc/proxy-config:ro
    ports:
      - "8081:8080"  # mitmproxy web interface
    networks:
      - headscale-net
    depends_on:
      - headscale
    profiles:
      - proxy  # Optional service, enable with --profile proxy

volumes:
  headscale-db-data:
  headscale-data:
  headscale-socket:
  vpn-exit-data:
  proxy-gateway-data:
  proxy-certs:

networks:
  headscale-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
